
(defun insert-python-comment (word)
  (interactive "sWord: ")
  (let* ((total-length 60)
         (prefix "# ")
         (suffix " #")
         (word-length (length word))
         (dashes-length (- total-length
                           (length prefix)
                           (length suffix)
                           word-length))
         (dashes-half (/ dashes-length 2))
         (dashes (make-string dashes-half ?-))
         (comment (concat prefix dashes " " word " " dashes suffix)))
    (insert comment)))


(defun insert-c-comment (word)
  (interactive "sWord: ")
  (let* ((total-length 60)
         (prefix "/* ")
         (suffix " */")
         (word-length (length word))
         (dashes-length (- total-length
                           (length prefix)
                           (length suffix)
                           word-length))
         (dashes-half (/ dashes-length 2))
         (dashes (make-string dashes-half ?-))
         (comment (concat prefix dashes " " word " " dashes suffix)))
    (insert comment)))


(defun insert-latex-comment (word)
  (interactive "sWord: ")
  (let* ((total-length 60)
         (prefix "% ")
         (suffix " %")
         (word-length (length word))
         (dashes-length (- total-length
                           (length prefix)
                           (length suffix)
                           word-length))
         (dashes-half (/ dashes-length 2))
         (dashes (make-string dashes-half ?-))
         (comment (concat prefix dashes " " word " " dashes suffix)))
    (insert comment)))


(defun insert-elisp-comment (word)
  (interactive "sWord: ")
  (let* ((total-length 60)
         (prefix ";; ")
         (suffix " ;;")
         (word-length (length word))
         (dashes-length (- total-length
                           (length prefix)
                           (length suffix)
                           word-length))
         (dashes-half (/ dashes-length 2))
         (dashes (make-string dashes-half ?-))
         (comment (concat prefix dashes " " word " " dashes suffix)))
    (insert comment)))


(defun insert-comment-based-on-mode (word)
  (interactive "sWord: ")
  (cond
   ((derived-mode-p 'python-mode) (insert-python-comment word))
   ((derived-mode-p 'c-mode) (insert-c-comment word))
   ((derived-mode-p 'c++-mode) (insert-c-comment word))
   ((derived-mode-p 'latex-mode) (insert-latex-comment word))
   ((derived-mode-p 'emacs-lisp-mode) (insert-elisp-comment word))
   (t (insert-c-comment word))))


(add-hook 'latex-mode-hook
          (lambda ()
            (local-set-key (kbd "C-l c")
                           (lambda () (interactive)
                             (insert-snippet "% ---------------------- keyword ------------------------ #")))
            (local-set-key (kbd "C-l h")
                           (lambda () (interactive)
                             (insert-snippet "\\imageheight{height}{image.jpg}{caption}{label}")))
            (local-set-key (kbd "C-l w")
                           (lambda () (interactive)
                             (insert-snippet "\\imagewidth{width}{image.jpg}{caption}{label}")))
            (local-set-key (kbd "C-l 2")
                           (lambda () (interactive)
                             (insert-snippet "\\insertimages{image1.jpg, image2.jpg}{minipage_width}{height}{horizontal_space}")))
            (local-set-key (kbd "C-l e")
                           (lambda () (interactive)
                             (insert-snippet "\\begin{equation}\nequation\n\\end{equation}")))
            (local-set-key (kbd "C-l E")
                           (lambda () (interactive)
                             (insert-snippet "\\begin{equation*}\nequation\n\\end{equation*}")))
            (local-set-key (kbd "C-l a")
                           (lambda () (interactive)
                             (insert-snippet "\\begin{align}\nequation\n\\end{align}")))
            (local-set-key (kbd "C-l A")
                           (lambda () (interactive)
                             (insert-snippet "\\begin{align*}\nequation\n\\end{align*}")))
            (local-set-key (kbd "C-l i")
                           (lambda () (interactive)
                             (insert-snippet "\\begin{itemize}\n\t\\item \n\\end{itemize}")))
            (local-set-key (kbd "C-l l")
                           (lambda () (interactive)
                             (insert-snippet "\\begin{enumerate}\n\t\\item \n\\end{enumerate}")))
            (local-set-key (kbd "C-l t")
                           (lambda () (interactive)
                             (insert-snippet "\\begin{note}{color}\n\n\\end{note}")))))

